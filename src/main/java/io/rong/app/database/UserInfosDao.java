package io.rong.app.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.text.TextUtils;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table USER_INFOS.
*/
public class UserInfosDao extends AbstractDao<UserInfos, Long> {

    public static final String TABLENAME = "USER_INFOS";

    /**
     * Properties of entity UserInfos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property UserTrueName = new Property(3, String.class, "usernickname", false, "USERNICKNAME");
        public final static Property Portrait = new Property(4, String.class, "portrait", false, "PORTRAIT");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
        public final static Property Company = new Property(6, String.class, "company", false, "COMPANY");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property Address = new Property(8, String.class, "address", false, "ADDRESS");
        public final static Property Friendid = new Property(9, String.class, "friendid", false, "FRIENDID");
        public final static Property Labels = new Property(10, String.class, "labels", false, "LABELS");
    }


    public UserInfosDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_INFOS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USERID' TEXT NOT NULL UNIQUE ," + // 1: userid
                "'USERNAME' TEXT NOT NULL ," + // 2: username
                "'USERNICKNAME' TEXT NOT NULL ," + // 3: usertruename
                "'PORTRAIT' TEXT," + // 4: portrait
                "'STATUS' TEXT NOT NULL," + // 5: portrait
                "'COMPANY' TEXT," + // 6: company
                "'TITLE' TEXT," + // 7: title
                "'ADDRESS' TEXT," + // 8: address
                "'FRIENDID' TEXT," + // 9: friendid
                "'LABELS' TEXT);"); // 10: labels
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_INFOS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserid());
        stmt.bindString(3, entity.getUsername());
        stmt.bindString(4, entity.getUserNickName());
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(5, portrait);
        }
        stmt.bindString(6, entity.getStatus());

        if (!TextUtils.isEmpty(entity.mCompany)) {
            stmt.bindString(7, entity.mCompany);
        }
        if (!TextUtils.isEmpty(entity.mTitle)) {
            stmt.bindString(8, entity.mTitle);
        }
        if (!TextUtils.isEmpty(entity.mAddress)) {
            stmt.bindString(9, entity.mAddress);
        }
        if (!TextUtils.isEmpty(entity.mFrindid)) {
            stmt.bindString(10, entity.mFrindid);
        }
        if (!TextUtils.isEmpty(entity.mLabels)) {
            stmt.bindString(11, entity.mLabels);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfos readEntity(Cursor cursor, int offset) {
        UserInfos entity = new UserInfos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // userid
            cursor.getString(offset + 2), // username
            cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // portrait
            cursor.getString(offset + 5), // status
            cursor.getString(offset + 6),
            cursor.getString(offset + 7),
            cursor.getString(offset + 8),
            cursor.getString(offset + 9),
            cursor.getString(offset + 10)
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfos entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserid(cursor.getString(offset + 1));
        entity.setUsername(cursor.getString(offset + 2));
        entity.setUserNickName(cursor.getString(offset + 3));
        entity.setPortrait(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.getString(offset + 5));

        entity.mCompany = cursor.getString(offset + 6);
        entity.mTitle = cursor.getString(offset + 7);
        entity.mAddress = cursor.getString(offset + 8);
        entity.mFrindid = cursor.getString(offset + 9);
        entity.mLabels = cursor.getString(offset + 10);

     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInfos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
